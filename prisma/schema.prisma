generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AssetType {
  id            String         @id @default(cuid())
  assetName     String
  code          String         @unique
  description   String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  industryId    String
  assets        Asset[]
  assetSubTypes AssetSubType[]

  @@map("assetType")
}

model AssetSubType {
  id          String    @id @default(cuid())
  assetTypeId String
  name        String
  code        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  assets      Asset[]
  assetType   AssetType @relation(fields: [assetTypeId], references: [id])

  @@index([assetTypeId], map: "assetSubType_assetTypeId_fkey")
  @@map("assetSubType")
}

model Asset {
  id                 String            @id @default(cuid())
  assetTypeId        String?
  assetSubTypeId     String?
  assetName          String?
  warrantyPeriod     Int?
  warrantyStartDate  DateTime?
  warrantyEndDate    DateTime?
  installationDate   DateTime?
  brand              String?
  model              String?
  subModel           String?
  isActive           Boolean           @default(true)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  consumerId         String?
  partNo             String?
  supplierCode       String?
  isAmc              Boolean?          @default(true)
  consumerSerialNo   String?
  departmentId       String?
  grnId              String?
  grnItemId          String?
  poLineItemId       String?
  supplierId         String?
  supplierSerialNo   String?
  assetConditionCode String?
  ageDays            Int?              @default(50)
  draft              Boolean           @default(false)
  status             String?
  assetAssignTo      String?
  warrantyNotApplicable Boolean        @default(false)
  amcCmcNotApplicable   Boolean        @default(false)
  assetCondition     AssetCondition?   @relation(fields: [assetConditionCode], references: [code])
  assetSubType       AssetSubType?     @relation(fields: [assetSubTypeId], references: [id])
  assetType          AssetType?        @relation(fields: [assetTypeId], references: [id])
  consumer           Consumer?         @relation(fields: [consumerId], references: [id])
  department         Department?       @relation(fields: [departmentId], references: [deptId])
  supplier           Supplier?         @relation("SupplierToAsset", fields: [supplierId], references: [id])
  assetStatus              AssetStatus?         @relation(fields: [status], references: [statusCode])
  installations      Installation[]
  locations          Location[]
  serviceContracts   ServiceContract[]
  serviceRequests    ServiceRequest[]
  warranties         Warranties[]

  @@index([assetSubTypeId], map: "asset_assetSubTypeId_fkey")
  @@index([assetTypeId], map: "asset_assetTypeId_fkey")
  @@index([departmentId], map: "asset_departmentId_fkey")
  @@index([consumerId], map: "asset_consumerId_fkey")
  @@index([supplierId], map: "asset_supplierId_fkey")
  @@index([assetConditionCode], map: "asset_assetConditionCode_fkey")
  @@index([status], map: "asset_status_fkey")
  @@map("asset")
}

model AssetStatus {
  statusCode  String @id
  displayName String
  group       String @map("group_name")

  asset Asset[]

  @@map("assetStatus")
}

model Department {
  deptId                String                  @id @default(cuid())
  deptName              String
  consumerId            String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  assets                Asset[]
  consumer              Consumer                @relation(fields: [consumerId], references: [id])
  departmentInventory   DepartmentInventory[]
  installations         Installation[]
  inventoryTransactions InventoryTransactions[]
  locations             Location[]

  @@index([consumerId])
  @@map("department")
}

model Location {
  id                String         @id @default(cuid())
  assetId           String
  departmentId      String
  building          String?
  floorNumber       String?
  roomNumber        String?
  isCurrentLocation Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  installations     Installation[]
  asset             Asset          @relation(fields: [assetId], references: [id])
  department        Department     @relation(fields: [departmentId], references: [deptId])

  @@index([assetId], map: "location_assetId_fkey")
  @@index([departmentId], map: "location_departmentId_fkey")
  @@map("location")
}

model Installation {
  id                 String              @id @default(cuid())
  assetId            String
  locationId         String
  departmentId       String
  installationDate   DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  installationStatus InstallationStatus? 
  asset              Asset               @relation(fields: [assetId], references: [id])
  department         Department          @relation(fields: [departmentId], references: [deptId])
  location           Location            @relation(fields: [locationId], references: [id])

  @@index([assetId], map: "installation_assetId_fkey")
  @@index([locationId], map: "installation_locationId_fkey")
  @@index([departmentId], map: "installation_departmentId_fkey")
  @@map("installation")
}

model PO {
  id          String       @id @default(cuid())
  poNumber    String       @unique
  consumerId  String
  supplierId  String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  status      POStatus     @default(Draft)
  totalAmount Decimal      @default(0.00) @db.Decimal(10, 2)
  grn         GRN[]
  consumer    Consumer     @relation(fields: [consumerId], references: [id])
  supplier    Supplier     @relation(fields: [supplierId], references: [id])
  poLineItem  POLineItem[]

  @@index([consumerId])
  @@index([supplierId])
  @@index([status])
  @@map("po")
}

model POLineItem {
  id                    String                  @id @default(cuid())
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  grnId                 String?
  itemName              String                  @default("Unknown")
  partNo                String
  poId                  String
  price                 Decimal                 @db.Decimal(10, 2)
  quantity              Decimal                 @db.Decimal(10, 3)
  totalAmount           Decimal                 @default(0.00) @db.Decimal(10, 2)
  receivedQty           Decimal                 @default(0.000) @db.Decimal(10, 3)
  remainingQty          Decimal                 @default(0.000) @db.Decimal(10, 3)
  grnItem               GRNItem[]
  inventoryTransactions InventoryTransactions[]
  po                    PO                      @relation(fields: [poId], references: [id])

  @@index([poId], map: "purchaseItem_poId_fkey")
  @@index([partNo])
  @@index([receivedQty])
  @@map("poLineItem")
}

model GRN {
  id            String    @id @default(cuid())
  poId          String
  grnNo         String    @default(cuid())
  challan       String?
  deliveryNote  String?
  deliveryDate  DateTime?
  driverName    String?
  receivedBy    String?
  vehicleNumber String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  po            PO        @relation(fields: [poId], references: [id])
  grnItem       GRNItem[]

  @@index([poId], map: "grn_poId_fkey")
  @@map("grn")
}

model GRNItem {
  id                    String                  @id @default(cuid())
  grnId                 String
  poLineItemId          String
  quantityOrdered       Decimal                 @default(0.000) @db.Decimal(10, 3)
  quantityReceived      Decimal                 @default(0.000) @db.Decimal(10, 3)
  quantityAccepted      Decimal                 @default(0.000) @db.Decimal(10, 3)
  quantityRejected      Decimal                 @default(0.000) @db.Decimal(10, 3)
  quantityRemaining     Decimal                 @default(0.000) @db.Decimal(10, 3)
  remarks               String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  grn                   GRN                     @relation(fields: [grnId], references: [id])
  poLineItem            POLineItem              @relation(fields: [poLineItemId], references: [id])
  inventoryTransactions InventoryTransactions[]

  @@index([grnId], map: "grnItem_grnId_fkey")
  @@index([poLineItemId], map: "grnItem_poLineItemId_fkey")
  @@map("grnItem")
}

model WarrantyType {
  warrantyTypeId Int          @id @default(autoincrement())
  typeName       String       @db.VarChar(100)
  description    String?      @db.Text
  createdAt      DateTime     @default(now())
  consumerId     String?
  supplierId     String?
  warranties     Warranties[]

  @@map("warrantyType")
}

model Warranties {
  warrantyId          Int                    @id @default(autoincrement())
  assetId             String                 @db.VarChar(255)
  warrantyTypeId      Int?
  warrantySupplierId  String?                @db.VarChar(255)
  warrantyNumber      String?                @db.VarChar(100)
  startDate           DateTime?
  endDate             DateTime?
  warrantyPeriod      Int?
  coverageType        String?                @db.Text
  coverageDescription String?                @db.Text
  termsConditions     String?                @db.Text
  cost                Decimal?               @db.Decimal(10, 2)
  isActive            Boolean                @default(true)
  autoRenewal         Boolean                @default(false)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  consumerId          String?
  supplierId          String?
  excluded            String?                @db.Text
  included            String?                @db.Text
  serviceRequest      ServiceRequest[]
  asset               Asset                  @relation(fields: [assetId], references: [id])
  consumer            Consumer?              @relation(fields: [consumerId], references: [id])
  supplier            Supplier?              @relation(fields: [supplierId], references: [id])
  warrantyType        WarrantyType?          @relation(fields: [warrantyTypeId], references: [warrantyTypeId])
  notifications       WarrantyNotification[]

  @@index([endDate], map: "idxEndDate")
  @@index([assetId], map: "idxAssetId")
  @@index([consumerId], map: "warranties_consumerId_fkey")
  @@index([supplierId], map: "warranties_supplierId_fkey")
  @@index([warrantyTypeId], map: "warranties_warrantyTypeId_fkey")
  @@map("warranties")
}

model WarrantyNotification {
  notificationId   Int                      @id @default(autoincrement())
  warrantyId       Int
  notificationType WarrantyNotificationType
  message          String
  recipientEmail   String?
  sentDate         DateTime?
  isSent           Boolean                  @default(false)
  createdAt        DateTime                 @default(now())
  warranty         Warranties               @relation(fields: [warrantyId], references: [warrantyId])

  @@index([warrantyId], map: "warrantyNotifications_warrantyId_fkey")
  @@map("warrantyNotifications")
}

/// ConsumerPreference model stores notification preferences for each consumer.
model ConsumerPreference {
  preferenceId     Int      @id @default(autoincrement())
  consumerId       Int      @unique
  notificationDays Int      @default(30)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("consumerPreferences")
}

/// SupplierPreference model stores notification preferences for each supplier.
/// Allows suppliers to set how many days before warranty expiry they want to be notified.
model SupplierPreference {
  preferenceId     Int      @id @default(autoincrement())
  supplierId       Int      @unique
  notificationDays Int      @default(30)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("supplierPreferences")
}

model ContractType {
  contractTypeId         Int               @id @default(autoincrement())
  typeName               ContractTypeName
  typeCode               String            @unique @db.VarChar(10)
  description            String?
  contractDurationMonths Int?
  createdAt              DateTime          @default(now())
  serviceContracts       ServiceContract[]

  @@map("contractTypes")
}

/// ServiceContractStatus model stores the possible statuses for service contracts.
/// This is a lookup table referenced by ServiceContract.
model ServiceContractStatus {
  statusId         Int               @id @default(autoincrement())
  name             String            @unique @db.VarChar(20)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  serviceContracts ServiceContract[]

  @@map("serviceContractsStatus")
}

model ServiceContract {
  contractId                    String                 @id @default(cuid())
  contractNumber                String                 @unique @db.VarChar(100)
  contractTypeId                Int
  serviceSupplierId             String
  assetId                       String
  contractName                  String                 @db.VarChar(255)
  amount                        Float?
  startDate                     DateTime               @db.Date
  endDate                       DateTime               @db.Date
  paymentTerms                  String?
  coverageType                  CoverageType           @default(COMPREHENSIVE)
  includes                      String?
  excludes                      String?
  serviceFrequency              String?
  preventiveMaintenanceIncluded Boolean                @default(true)
  breakdownMaintenanceIncluded  Boolean                @default(true)
  autoRenewal                   Boolean                @default(false)
  createdBy                     String?                @db.VarChar(100)
  updatedBy                     String?                @db.VarChar(100)
  createdAt                     DateTime               @default(now())
  updatedAt                     DateTime               @updatedAt
  statusId                      Int?
  asset                         Asset                  @relation(fields: [assetId], references: [id])
  contractType                  ContractType           @relation(fields: [contractTypeId], references: [contractTypeId])
  serviceSupplier               Supplier               @relation(fields: [serviceSupplierId], references: [id])
  status                        ServiceContractStatus? @relation(fields: [statusId], references: [statusId])
  serviceFrequencyRef           ServiceFrequency?      @relation(fields: [serviceFrequency], references: [code])
  paymentTermsRef                PaymentTerms?          @relation(fields: [paymentTerms], references: [paymentCode])
  serviceRequests               ServiceRequest[]

  @@index([contractNumber], map: "idxContractName")
  @@index([startDate], map: "idxStartDate")
  @@index([endDate], map: "idxEndDate")
  @@index([serviceSupplierId], map: "idxServiceContractSupplierId")
  @@index([assetId], map: "idxServiceContractAssetId")
  @@index([contractTypeId], map: "serviceContracts_contractTypeId_fkey")
  @@index([statusId], map: "serviceContracts_statusId_fkey")
  @@index([serviceFrequency], map: "idxServiceFrequency")
  @@index([paymentTerms], map: "idxPaymentTerms")
  @@map("serviceContracts")
}

model PaymentTerms {
  paymentCode  String           @id
  displayName  String
  contracts    ServiceContract[]

  @@map("paymentTerms")
}


model ServiceFrequency {
  code         String           @id
  displayName  String
  contracts    ServiceContract[]

  @@map("serviceFrequency")
}


model ServiceRequest {
  serviceRequestId     String                @id @default(cuid())
  assetId              String                @db.VarChar(255)
  technicianName       String?               @db.VarChar(100)
  serviceSupplierId    String?
  serviceContractId    String?
  srNo                 String?               @default(cuid()) @db.VarChar(100)
  serviceType          String?               @db.VarChar(100)
  serviceDescription   String?               @db.Text
  problem              String?               @db.Text
  createdAt            DateTime              @default(now())
  updatedAt            DateTime?             @updatedAt
  approverName         String?
  closureNotes         String?
  closureDate          DateTime?
  closureBy            String?
  closureReason        String?
  totalCost            Decimal?              @db.Decimal(10, 2)
  warrantyId           Int?
  assetConditionCode   String?
  srStatusCode         String?
  assetCondition       AssetCondition?       @relation(fields: [assetConditionCode], references: [code])
  asset                Asset                 @relation(fields: [assetId], references: [id])
  serviceContract      ServiceContract?      @relation(fields: [serviceContractId], references: [contractId])
  serviceSupplier      Supplier?             @relation(fields: [serviceSupplierId], references: [id])
  serviceRequestStatus ServiceRequestStatus? @relation(fields: [srStatusCode], references: [code])
  warranty             Warranties?           @relation(fields: [warrantyId], references: [warrantyId])
  serviceRequestItems  ServiceRequestItem[]

  @@index([serviceSupplierId], map: "idxServiceRequestSupplierId")
  @@index([serviceContractId], map: "idxServiceRequestContractId")
  @@index([assetId], map: "serviceRequest_assetId_fkey")
  @@index([warrantyId], map: "serviceRequest_warrantyId_fkey")
  @@index([assetConditionCode], map: "serviceRequest_assetConditionCode_fkey")
  @@index([srStatusCode], map: "serviceRequest_srStatusCode_fkey")
  @@map("serviceRequest")
}

model ServiceRequestItem {
  serviceRequestItemId Int            @id @default(autoincrement())
  serviceRequestId     String
  partName             String         @db.VarChar(255)
  partCost             Float?
  labourCost           Float?
  quantity             Int?
  totalCost            Float?
  defectDescription    String?        @db.Text
  createdAt            DateTime       @default(now())
  updatedAt            DateTime?      @updatedAt
  deletedAt            DateTime?
  deletedBy            String?
  isDeleted            Boolean        @default(false)
  serviceRequest       ServiceRequest @relation(fields: [serviceRequestId], references: [serviceRequestId])

  @@index([serviceRequestId], map: "idxServiceRequestItemRequestId")
  @@map("serviceRequestItem")
}

model Consumer {
  id                String             @id @default(cuid())
  name              String
  code              String?
  contactName       String?
  email             String?
  phone             String?
  address           String?
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  assets            Asset[]
  consumerSuppliers ConsumerSupplier[]
  departments       Department[]
  inventory         Inventory[]
  purchaseOrders    PO[]
  warranties        Warranties[]

  @@map("consumer")
}

model Supplier {
  id                    String                  @id @default(cuid())
  name                  String
  code                  String?                 
  gstNumber             String?
  email                 String?
  phone                 String?
  address               String?
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  primaryContactEmail   String?
  primaryContactName    String?
  primaryContactPhone   String?
  suppliedAssets        Asset[]                 @relation("SupplierToAsset")
  consumerSuppliers     ConsumerSupplier[]
  inventoryTransactions InventoryTransactions[]
  purchaseOrders        PO[]
  ServiceContract       ServiceContract[]
  serviceRequests       ServiceRequest[]
  warranties            Warranties[]

  @@map("supplier")
}

model ConsumerSupplier {
  consumerId   String
  supplierId   String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  areaOfSupply String?   @db.Text
  registeredAt DateTime?
  supplierCode String?
  consumer     Consumer  @relation(fields: [consumerId], references: [id])
  supplier     Supplier  @relation(fields: [supplierId], references: [id])

  @@id([consumerId, supplierId])
  @@index([supplierId], map: "consumerSupplier_supplierId_fkey")
  @@map("consumerSupplier")
}

model Inventory {
  id                    String                  @id @default(cuid())
  quantity              Int
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  minStock              Int?
  consumerId            String
  itemName              String
  unitMeasure           UnitMeasure?
  itemNo                String?                 @default(cuid())
  departmentInventory   DepartmentInventory[]
  consumer              Consumer                @relation(fields: [consumerId], references: [id])
  inventoryTransactions InventoryTransactions[]

  @@index([consumerId], map: "inventory_consumerId_fkey")
  @@map("inventory")
}

model DepartmentInventory {
  id           String     @id @default(cuid())
  departmentId String
  quantity     Int
  inventoryId  String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  department   Department @relation(fields: [departmentId], references: [deptId])
  inventory    Inventory  @relation(fields: [inventoryId], references: [id])

  @@index([departmentId], map: "departmentInventory_departmentId_fkey")
  @@index([inventoryId], map: "departmentInventory_inventoryId_fkey")
  @@map("departmentInventory")
}

model InventoryTransactions {
  id                  String                   @id @default(cuid())
  inventoryId         String
  quantity            Int
  createdAt           DateTime                 @default(now())
  departmentId        String?
  grnItemId           String?
  poLineItemId        String?
  transactionTypeCode String
  expiredAt           DateTime?
  supplierId          String?
  reason              String?                  @db.Text
  department          Department?              @relation(fields: [departmentId], references: [deptId])
  grnItem             GRNItem?                 @relation(fields: [grnItemId], references: [id])
  inventory           Inventory                @relation(fields: [inventoryId], references: [id])
  poLineItem          POLineItem?              @relation(fields: [poLineItemId], references: [id])
  supplier            Supplier?                @relation(fields: [supplierId], references: [id])
  transactionType     InventoryTransactionType @relation(fields: [transactionTypeCode], references: [code])

  @@index([departmentId], map: "inventoryTransactions_departmentId_fkey")
  @@index([grnItemId], map: "inventoryTransactions_grnItemId_fkey")
  @@index([inventoryId], map: "inventoryTransactions_inventoryId_fkey")
  @@index([poLineItemId], map: "inventoryTransactions_poLineItemId_fkey")
  @@index([supplierId], map: "inventoryTransactions_supplierId_fkey")
  @@index([transactionTypeCode], map: "inventoryTransactions_transactionTypeCode_fkey")
  @@map("inventoryTransactions")
}

model ServiceRequestStatus {
  code           String           @id
  displayName    String
  serviceRequest ServiceRequest[]

  @@map("serviceRequestStatus")
}

model AssetCondition {
  code           String           @id
  displayName    String
  asset          Asset[]
  serviceRequest ServiceRequest[]

  @@map("assetCondition")
}

model InventoryTransactionType {
  code                  String                  @id
  displayName           String
  inventoryTransactions InventoryTransactions[]

  @@map("inventoryTransactionType")
}

enum POStatus {
  Draft
  PendingApproval
  Approved
  Issued
  PartiallyReceived
  FullyReceived
  Cancelled
  Closed
}

enum WarrantyNotificationType {
  Expiry_Warning
  Expired
  Renewal_Due
  Claim_Update
}

enum ContractTypeName {
  AMC
  CMC
  ON_CALL
  BREAKDOWN_MAINTENANCE
}

enum CoverageType {
  COMPREHENSIVE
  PARTS_ONLY
  LABOR_ONLY
  PREVENTIVE_ONLY
}



enum InstallationStatus {
  InstallationNotRequired
  Installed
  NotInstalled
}

enum UnitMeasure {
  PIECE
  BOX
  PACK
  LITER
  MILLILITER
  GRAM
  KILOGRAM
  TABLET
  STRIP
  VIAL
  AMPULLE
}
