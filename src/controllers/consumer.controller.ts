import { Request, Response } from 'express';
import {
  createConsumer,
  deleteConsumer,
  getAllConsumers,
  getConsumerById,
  getSuppliersForConsumer,
  linkSupplierToConsumer,
  unlinkSupplierFromConsumer,
  updateConsumer,
} from '../services/consumer.service';

export const listConsumersController = async (_req: Request, res: Response): Promise<void> => {
  const rows = await getAllConsumers();
  res.json(rows);
  return;
};

export const getConsumerByIdController = async (req: Request, res: Response): Promise<void> => {
  const { id } = req.params;
  if (!id) {
    res.status(400).json({ error: 'id is required' });
    return;
  }
  const row = await getConsumerById(id);
  if (!row) {
    res.status(404).json({ error: 'Consumer not found' });
    return;
  }
  res.json(row);
  return;
};

export const createConsumerController = async (req: Request, res: Response): Promise<void> => {
  const row = await createConsumer(req.body);
  res.status(201).json(row);
  return;
};

export const updateConsumerController = async (req: Request, res: Response): Promise<void> => {
  const { id } = req.params;
  if (!id) {
    res.status(400).json({ error: 'id is required' });
    return;
  }
  const row = await updateConsumer(id, req.body);
  res.json(row);
  return;
};

export const deleteConsumerController = async (req: Request, res: Response): Promise<void> => {
  const { id } = req.params;
  if (!id) {
    res.status(400).json({ error: 'id is required' });
    return;
  }
  const row = await deleteConsumer(id);
  res.json(row);
  return;
};

export const listSuppliersForConsumerController = async (req: Request, res: Response): Promise<void> => {
  const { id } = req.params;
  if (!id) {
    res.status(400).json({ error: 'id is required' });
    return;
  }
  const rows = await getSuppliersForConsumer(id);
  res.json(rows);
  return;
};

export const linkSupplierToConsumerController = async (req: Request, res: Response): Promise<void> => {
  const { id } = req.params;
  const { supplierId } = req.body as { supplierId?: string };
  if (!id || !supplierId) {
    res.status(400).json({ error: 'id and supplierId are required' });
    return;
  }
  const row = await linkSupplierToConsumer(id, supplierId);
  res.status(201).json(row);
  return;
};

export const unlinkSupplierFromConsumerController = async (req: Request, res: Response): Promise<void> => {
  const { id, supplierId } = req.params as { id?: string; supplierId?: string };
  if (!id || !supplierId) {
    res.status(400).json({ error: 'id and supplierId are required' });
    return;
  }
  const row = await unlinkSupplierFromConsumer(id, supplierId);
  res.json(row);
  return;
};

/**
 * Sync consumer from molecule backend
 * This endpoint is called when a new consumer is created in the main system
 */
export const syncConsumerController = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id, email, phone, company, address, isActive } = req.body;

    // Validate required fields
    if (!id || !email) {
      res.status(400).json({
        success: false,
        error: 'Consumer ID and email are required'
      });
      return;
    }

    // Check if consumer already exists by email
    const existingConsumer = await getConsumerById(id);
    if (existingConsumer) {
      res.status(409).json({
        success: false,
        error: 'Consumer already exists with this ID'
      });
      return;
    }

    console.log('in asset molecule========>')
    // Create new consumer (ID will be auto-generated by Prisma)
    const consumer = await createConsumer({
      name: company || email, // Use company name or email as name
      id: id, 
      contactName: email, // Use email as contact name
      email,
      phone: phone || null,
      address: address || null,
      isActive: isActive ?? true
    });

    res.status(201).json({
      success: true,
      data: consumer,
      message: 'Consumer created successfully'
    });

  } catch (error) {
    console.error('Error syncing consumer:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to sync consumer'
    });
  }
};



